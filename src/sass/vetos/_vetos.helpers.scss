/* 
------------
VETOS.
HELPERS

a.k.a
THE 
NAUGHTY FILE
------------ 
*/


/**
*
* This is the naughty file that keeps all the little helper classes contained.
* These classes enable you to override any pre-existing styling where required.
*
* They shouldn't be used where the styling can be added to an element within a 
* css file but we all know that we don't live in an ideal world and quick 
* protoyping can be important, so adding a little classes temporarily can be 
* useful.
*
*/ 


/**
*
* Floats
* ----------
* Floating elements should be set within your CSS but this can't always be 
* possible. The classes below enable you to set the float of an element.
* 
*/

.float--left{
	float: left !important;
}

.float--right{
	float: right !important;
}

.float--none{
	float: none !important;
}

/**
*
* Margins & Padding
* -----------------
* Margins and padding should be applied within a class but should you be
* needing to add a little margin or padding to an element while quickly 
* prototyping then the helper classes below should be useful. You can set the
* margin or padding around the whole element, as shown in the examples below,
* or you can set directions, which is also illustrated below.
* 
* [!] Usage Example
* -----------------
*
* <div class="pad">Padded all around.</div>
* <div class="pad--right">Padding added to the right.</div>
*
* <div class="margin">Margin pushing all around.</div>
* <div class="margin--left">Margin added to the left.</div>
*
*/

/**
* Directions Sass List
*/

$directions:('top','right','bottom','left');


/**
* Margins
*/

.push{
    @include remCalc(margin, $spacer);
}

@each $direction in $directions {
    .push--#{$direction}{
        @include remCalc(margin-#{$direction}, $spacer);
    }
}

/**
* Padding
*/

.pad{
    @include remCalc(padding, $spacer);
}

@each $direction in $directions {
    .pad--#{$direction}{
        @include remCalc(padding-#{$direction}, $spacer);
    }
}

/**
*
* Font Weights
* ------------
* The font weight over classes below can sometimes become quite useful, as 
* shown in the example below:
*
* [!] Usage Example
* -----------------
* <h1>Font Weight <span class="font-weight--normal">override</span></h1>
* 
*/

.font-weight--light{
	font-weight: $weight-light !important;
}

.font-weight--normal{
	font-weight: $weight-normal !important;
}

.font-weight--heavy{
	font-weight: $weight-heavy !important;
}

/**
*
* Text Alignment
* --------------
* The alignment of text set by a parent class/style sometimes needs to be
* overridden. You can achieve that by using once of the classes below:
*
* [!] Usage Example
* -----------------
* <p class="align--right">Text aligned right</p>
* <p class="align--center">Text aligned center</p>
* <p class="align--left">Text aligned left</p>
* 
*/

.align--left{
	text-align: left !important;
}

.align--center{
	text-align: center !important;
}

.align--right{
	text-align: right !important;
}

/**
* Clear fixing
* ------------
* Sometimes you may wish to add a simple clear fix to an element, maybe to 
* cater for an older browser? Argh, when will they learn? Any way, to make 
* your job a little easier frontly includes a simple clearing class.
* 
* The example below illustrates that the clear will ensure elements clear
* each other correctly should you include a 
*
* [!] Usage Example
* -----------------
* <div>I'm floated left and only 50% wide</div>
* <span class="clearfix">I've just made sure the element below doesn't slide into the available 50% next to it and floats underneath.</span>
* <div>I'm floated left and only 20% wide</div>
*
*/

.clearfix{
	clear: both !important;
}

.clearfix--left{
	clear: left !important;
}

.clearfix--right{
	clear: right !important;
}


/**
*
* Hidding Elements
* ----------------
* Hiding elements can be useful when working with a repsonsive design. It 
* enables you to add and remove elements depending on the viewport easily.
* The classes below enable you to do just that, as shown in the example below:
*
* [!] Usage Example
* -----------------
* <div class="hidden display--tablet">
*     <p>Hey, you can only see me on a tablet device!</p>
* </div>
* 
*/

.hidden{
	display: none !important;
}

/**
* Hide or display elements on tablet devices
*/

@include respond-to(medium-screen){
	.display--medium-screen{
		display: block !important;
	}
	.hidden--medium-screen{
		display: none !important;
	}
}

/**
* Hide or display elements on mobile devices
*/

@include respond-to(small-screen){
	.display--small-screen{
		display: block !important;
	}
	.hidden--small-screen{
		display: none !important;
	}
}

